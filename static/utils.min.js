function parseCSVLine(t){const e=[];let i=!1,n="";for(let r=0;r<t.length;++r){const a=t[r];if('"'===a)i=!i;else if(" "!==a||i)n+=a;else for(n.length&&(e.push(n),n="");" "===t[r+1];)++r}return n.length&&e.push(n),e}async function fetchTable(t,e,i){const n=await fetch(t);if(!n.ok)return[];return(await n.text()).split("\n").filter((t=>t.trim())).map(parseCSVLine).filter((t=>!i||"0"!==t[e.indexOf(i)]&&"0.0"!==t[e.indexOf(i)])).map((t=>{let i={};return e.forEach(((e,n)=>i[e]=t[n])),i}))}function formatNumber(t,e=0){return t&&!isNaN(t)?Number(t).toLocaleString("en-US",{minimumFractionDigits:e,maximumFractionDigits:e}):"–"}function formatCompact(t){return t=Number(t),isNaN(t)?"–":Math.abs(t)>=1e6?(t/1e6).toFixed(1).replace(/\.0$/,"")+"M":Math.abs(t)>=1e3?(t/1e3).toFixed(1).replace(/\.0$/,"")+"k":t.toString()}function formatDiff(t,e=0){if(isNaN(t)||null==t)return"–";const i=Number(t);return i>0?`<diff class="up">+${formatNumber(i,e)}</diff>`:i<0?`<diff class="down">${formatNumber(i,e)}</diff>`:'<diff class="equal">±0</diff>'}function formatDate(t){return t?new Date(t).toLocaleDateString("en-US",{year:"2-digit",month:"2-digit",day:"2-digit"}):"–"}